{% extends 'base.html.twig' %}

{% block body %}
<div class="max-w-6xl mx-auto p-6 bg-white rounded-lg">
    <h1 class="text-3xl font-bold text-gray-800 mb-6">üé§ Liste des artistes</h1>

    <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
        <div>
            <label for="categoryFilter" class="block mb-1 font-medium">Cat√©gorie</label>
            <select id="categoryFilter" class="w-full border p-2 rounded">
                <option value="all">Toutes cat√©gories</option>
                <option value="Femme">Femmes</option>
                <option value="Homme">Hommes</option>
                <option value="Groupe">Groupes</option>
            </select>
        </div>
        <div>
            <label for="searchInput" class="block mb-1 font-medium">Rechercher</label>
            <input type="text" id="searchInput" placeholder="Nom de l'artiste..." class="w-full border p-2 rounded">
        </div>
        <div>
            <label for="sortOption" class="block mb-1 font-medium">Trier</label>
            <select id="sortOption" class="w-full border p-2 rounded">
                <option value="az">Nom (A-Z)</option>
                <option value="za">Nom (Z-A)</option>
            </select>
        </div>
    </div>

    {% set categories = {'Femme': [], 'Homme': [], 'Groupe': []} %}
    {% for person in persons %}
        {% set categories = categories|merge({ (person.category): categories[person.category]|merge([person]) }) %}
    {% endfor %}

    <div id="artistList">
        {% for category, people in categories %}
            <div data-category="{{ category }}" class="mb-8 artist-section">
                <h2 class="text-2xl font-semibold mb-4">{{ category ~ 's' }}</h2>
                <ul class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                    {% for person in people %}
                        {% set badgeColor = {
                            'Femme': 'bg-pink-500',
                            'Homme': 'bg-blue-500',
                            'Groupe': 'bg-green-500'
                        }[person.category] %}
                        
                        <li class="artist-item">
                            <a href="{{ path('app_person_show', {id: person.id}) }}" 
                               class="block border p-4 rounded bg-gray-50 hover:bg-gray-100 transition-all duration-300 ease-in-out hover:scale-105 hover:shadow-lg text-center font-semibold text-gray-800 relative" 
                               data-name="{{ person.name|lower }}">
                                <span class="absolute top-2 left-2 text-white text-xs px-2 py-1 rounded {{ badgeColor }}">
                                    {{ person.category }}
                                </span>
                                <div class="mt-4">
                                    {{ person.name }}
                                </div>
                            </a>
                        </li>
                    {% else %}
                        <li class="text-gray-400 italic">Aucun artiste dans cette cat√©gorie.</li>
                    {% endfor %}
                </ul>
            </div>
        {% endfor %}
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function () {
    const categoryFilter = document.getElementById('categoryFilter');
    const searchInput = document.getElementById('searchInput');
    const sortOption = document.getElementById('sortOption');
    const sections = document.querySelectorAll('.artist-section');

    function applyFilters() {
        const selectedCategory = categoryFilter.value;
        const search = searchInput.value.toLowerCase();
        const sort = sortOption.value;

        sections.forEach(section => {
            const category = section.dataset.category;
            const items = Array.from(section.querySelectorAll('.artist-item'));

            let visibleItems = items.filter(item => {
                const name = item.querySelector('a').dataset.name;
                return (selectedCategory === 'all' || category === selectedCategory) &&
                       (name.includes(search));
            });

            // Trier
            visibleItems.sort((a, b) => {
                const aName = a.querySelector('a').dataset.name;
                const bName = b.querySelector('a').dataset.name;
                return sort === 'az' ? aName.localeCompare(bName) : bName.localeCompare(aName);
            });

            const ul = section.querySelector('ul');
            ul.innerHTML = '';
            visibleItems.forEach(item => ul.appendChild(item));
            
            // Affiche ou masque la section
            section.style.display = visibleItems.length > 0 ? '' : 'none';
        });
    }

    categoryFilter.addEventListener('change', applyFilters);
    searchInput.addEventListener('input', applyFilters);
    sortOption.addEventListener('change', applyFilters);

    applyFilters();
});
</script>
{% endblock %}